# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: |
        GOOS=windows GOARCH=amd64 go build -v -o kram-amd64.exe
        GOOS=darwin GOARCH=amd64 go build -v -o kram-amd64-darwin

    # - name: check file
    #   run: ls -l

    - name: Get Release
      id: get_current_release
      uses: joutvhu/get-release@v1.0.2
      with:
        # Should get latest release?
        latest: true
        debug: true
      env:
        GITHUB_TOKEN: ${{ github.token }}

    # - name: echo name release
    #   run: echo last relaase tag ${{ steps.get_current_release.outputs.tag_name }}

    - name: test increment tag
      id: increment_tag
      run: |
        $version = "${{ steps.get_current_release.outputs.tag_name }}"
        $versionParts = $version -split '\.'
        $versionParts[-1] = [int]$versionParts[-1] + 1
        $newVersion = $versionParts -join '.'
        Write-Host "$newVersion"
        Write-Output "::set-output name=newtagversion::$newVersion"
      shell: pwsh

    # - name: test new tag output
    #   run: echo new tag is ${{ steps.increment_tag.outputs.newtagversion }}

    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{ steps.increment_tag.outputs.newtagversion }}
        tag_name: ${{ steps.increment_tag.outputs.newtagversion }}
        body: Auto Release ${{ steps.increment_tag.outputs.newtagversion }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        
    - name: upload windows artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .
        asset_name: kram-amd64.exe
        asset_content_type: application/gzip

    - name: upload linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .
        asset_name: kram-amd64-darwin
        asset_content_type: application/gzip
