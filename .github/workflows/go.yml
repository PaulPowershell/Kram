# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: go build -v ./...

    - name: check file
      run: ls -l
      
    # - name: Upload a Build Artifact
    #   uses: actions/upload-artifact@v3.1.3
    #   with:
    #     path: ./kram

    - name: Get Release
      id: get_current_release
      uses: joutvhu/get-release@v1.0.2
      with:
        # Should get latest release?
        latest: true
        debug: true
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: echo name release
      run: echo last relaase tag ${{ steps.get_current_release.outputs.tag_name }}

    - name: test increment tag
      run: |
        version=${{ steps.get_current_release.outputs.tag_name }}
        IFS='.' read -ra version_parts <<< "$version"
        ((version_parts[${#version_parts[@]}-1]++))
        new_version=$(IFS='.'; echo "${version_parts[*]}")
        echo "New Version: $new_version"


    # - name: release
    #   uses: actions/create-release@v1
    #   id: create_release
    #   with:
    #     draft: false
    #     prerelease: false
    #     release_name: ${{ steps.version.outputs.version }}
    #     tag_name: tagtest
    #     body_path: README.md
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
        
    # - name: upload windows artifact
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./kram
    #     asset_name: kram.exe
    #     asset_content_type: application/gzip
