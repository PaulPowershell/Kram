# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build & Release

on:
  push:
    branches:
      # - "main"
      - "Fix-action"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows, linux]
        arch: [386, amd64]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build Go
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -v -o kram-${{ matrix.arch }}-${{ matrix.os }}

      - name: Cache Build Artifacts
        uses: actions/cache@v4
        with:
          path: ./kram-${{ matrix.arch }}-${{ matrix.os }}
          key: ${{ github.run_id }}-cache-build

  create-release:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v3
      - name: Verify Files
        run: ls -la ./kram-*

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            ./kram-386-windows
            ./build/kram-amd64-windows
          key: ${{ github.run_id }}-cache-build

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: ./kram-amd64-windows
          key: ${{ github.run_id }}-cache-build

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: ./kram-386-linux
          key: ${{ github.run_id }}-cache-build

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: ./kram-amd64-linux
          key: ${{ github.run_id }}-cache-build

      - name: Get Last Release
        id: get_last_release
        uses: joutvhu/get-release@v1.0.2
        with:
          latest: true
          debug: true
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Increment Last Tag Version
        id: increment_tag
        run: |
          $version = "${{ steps.get_last_release.outputs.tag_name }}"
          $versionParts = $version -split '\.'
          $versionParts[-1] = [int]$versionParts[-1] + 1
          $newVersion = $versionParts -join '.'
          Write-Host "New version: $newVersion"
          "newtagversion=$newVersion" | Out-File -FilePath $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.increment_tag.outputs.newtagversion }}
          name: Kram ${{ steps.increment_tag.outputs.newtagversion }}
          body: Auto Release ${{ steps.increment_tag.outputs.newtagversion }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./kram-386-linux
            ./kram-amd64-linux
            ./kram-386-windows
            ./kram-amd64-windows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
